{"version":3,"sources":["Images.js","About.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Images","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","d","setState","console","log","react_default","a","createElement","className","map","i","reactstrap_es","href","Source","Subject","Component","About","apply","arguments","Home","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAIaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,IAHKR,EADvB,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,oBAAAC,MAAA,WAOwB,IAAAC,EAAAV,KAChBW,IAAO,yBAAyBC,KAAK,SAAAC,GACjCH,EAAKI,SAAS,CAACT,KAAMQ,QATjC,CAAAL,IAAA,SAAAC,MAAA,WAeQ,OADAM,QAAQC,IAAIhB,KAAKI,MAAMC,MAChBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACjBpB,KAAKI,MAAMC,KAAKgB,IAAI,SAACR,EAAGS,GACrB,OACIL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMf,IAAO,UAAYc,GACzBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACIN,EAAAC,EAAAC,cAAA,KAAGK,KAAMX,EAAEY,QACNZ,EAAEa,mBAtBnChC,EAAA,CAA4BiC,aCFfC,EAAb,SAAAjC,GAAA,SAAAiC,IAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA4B,GAAA9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8B,GAAAC,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAA8B,EAAAjC,GAAAG,OAAAS,EAAA,EAAAT,CAAA8B,EAAA,EAAApB,IAAA,SAAAC,MAAA,WAEQ,OAAOQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,+HAFfQ,EAAA,CAA2BD,aCCdI,EAAb,SAAApC,GAAA,SAAAoC,IAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAAF,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAiC,EAAApC,GAAAG,OAAAS,EAAA,EAAAT,CAAAiC,EAAA,EAAAvB,IAAA,SAAAC,MAAA,WAEQ,OAAOQ,EAAAC,EAAAC,cAACI,EAAA,EAAD,sBAFfQ,EAAA,CAA0BJ,aCwBXK,0LAlBP,OACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,KAAT,QACC,IACDlB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,WAAT,UACC,IACDlB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,UAAT,SAEAlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYR,IAClCd,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAY7C,IAClCuB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAYX,aAbnCD,cCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.7ad45500.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\r\n\r\nexport class Images extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        d3.csv(\"data/NatureImages.csv\").then(d => {\r\n            this.setState({data: d});\r\n        })\r\n        \r\n    }\r\n    render() {\r\n        console.log(this.state.data)\r\n        return <div className=\"container\">\r\n            {this.state.data.map((d, i) => {\r\n                return (\r\n                    <Card key = {\"picture\" + i}>\r\n                    <CardBody>\r\n                        <CardText> \r\n                            <a href={d.Source}>\r\n                                {d.Subject}\r\n                            </a>\r\n                        </CardText>\r\n                    </CardBody>\r\n                    </Card>\r\n                )\r\n            })}\r\n        </div>\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nexport class About extends Component {\r\n    render() {\r\n        return <div className=\"container\">This page has been created\r\n                                            using React. It's difficult to\r\n                                            understand but it makes the\r\n                                            functionality alot easier to\r\n                                            use.</div>\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nexport class Home extends Component {\r\n    render() {\r\n        return <Jumbotron>Esha More</Jumbotron>\r\n    }\r\n}\r\n","import React, {Component} from 'react';\nimport {HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport {Images} from './Images.js';\nimport {About} from './About.js';\nimport {Home} from './Home.js';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"container\">\n                    <Link to=\"/\">Home</Link>\n                    {' '}\n                    <Link to=\"/Images\">Images</Link>\n                    {' '}\n                    <Link to=\"/About\">About</Link>\n\n                    <Route exact path=\"/\" component={ Home } />\n                    <Route path=\"/Images\" component={ Images } />\n                    <Route path=\"/About\" component={ About } />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}